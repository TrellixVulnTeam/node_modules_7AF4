import React, { useEffect, useState } from "react";
import cn from "classnames";
import "./radiobutton.scss";
import PropTypes from "prop-types";

import { Icon } from "@metlife-apac/icon";

const RadioButton = ({
  testId,
  className,
  label,
  checked,
  isCheckIcon,
  onValueChange,
}) => {
  const [isChecked, setIsChecked] = useState(checked ?? false);

  const onChange = (value) => {
    // setIsChecked((prevState) => !prevState);
    onValueChange(value);
  };

  const elementId = testId && testId != "" ? testId : "radiobutton";

  useEffect(() => {
    setIsChecked(checked);

    document.getElementById(elementId).addEventListener(
      "keyup",
      (a) => {
        if (a.keyCode == 9) {
          document
            .getElementById(elementId)
            .classList.add(`met-radio__keyPress`);
        }
      },
      false
    );
    document.getElementById(elementId).addEventListener(
      "keydown",
      (a) => {
        if (a.keyCode == 9) {
          document
            .getElementById(elementId)
            .classList.remove(`met-radio__keyPress`);
        }
      },
      false
    );
    document.getElementById(elementId).addEventListener("mousedown", (a) => {
      a.preventDefault();
    });

    return () => {
      document.getElementById(elementId).removeEventListener("keyup", null);
      document.getElementById(elementId).removeEventListener("keydown", null);
      document.getElementById(elementId).removeEventListener("mousedown", null);
    };
  }, [checked]);

  return (
    <div
      id={elementId}
      data-testid={elementId}
      className={cn("met-radio", className)}
      tabIndex={1}
    >
      <div
        data-testid="radiobuttoncheck"
        className="met-radio__border"
        onClick={onChange(label)}
      >
        {isCheckIcon ? (
          <div
            className={cn("met-radio__circle", {
              "met-radio__circle--filled": isChecked,
            })}
          >
            <Icon
              className={cn("met-radio__icon")}
              name="check"
              isForceDarkMode
            />
          </div>
        ) : (
          <div
            className={cn("met-radio__circle", {
              "met-radio__circle--checked": isChecked,
            })}
          />
        )}
      </div>
      <div className={cn("met-radio__radiolabelcontainer")}>
        <label className={cn("met-radio__radiolabel")}>{label}</label>
      </div>
    </div>
  );
};

RadioButton.propTypes = {
  testId: PropTypes.string,
  className: PropTypes.string,
  checked: PropTypes.bool,
  label: PropTypes.string,
  onValueChange: PropTypes.func,
  isCheckIcon: PropTypes.bool,
};

RadioButton.defaultProps = {};

export default RadioButton;
