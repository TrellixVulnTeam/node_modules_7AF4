import React, { useCallback, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Check from '../../assets/images/dark-check.png';
import './checkbox.scss';

const Checkbox = ({ className, label, onCheck, value, disabled, testId, rounded }) => {
    const [isChecked, setIsCheck] = useState(value ?? false);

    const onClick = useCallback(() => {
        if (disabled) {
            return;
        }
        setIsCheck((prevState) => !prevState);
    }, [disabled]);

    const elementId = testId && testId != '' ? testId : 'checkbox';

    useEffect(() => {
        if (onCheck) {
            onCheck(isChecked);
        }
    }, [isChecked]);

    useEffect(() => {
        setIsCheck(value);

        document.getElementById(elementId).addEventListener('keyup', (a) => {
            if (a.keyCode == 9) {
                document.getElementById(elementId).classList.add(`met-checkbox__keyPress`)
            }
        }, false);
        document.getElementById(elementId).addEventListener('keydown', (a) => {
            if (a.keyCode == 9) {
                document.getElementById(elementId).classList.remove(`met-checkbox__keyPress`)
            }
        }, false);
        document.getElementById(elementId).addEventListener('mousedown', (a) => {
            a.preventDefault();
        });
  
        return () => {
            document.getElementById(elementId).removeEventListener('keyup',null);
            document.getElementById(elementId).removeEventListener('keydown',null);
            document.getElementById(elementId).removeEventListener('mousedown',null);
        }
    }, [value]);

    return (
        <div
            id={elementId}
            data-testid={elementId}
            className={cn('met-checkbox', className)}
            onClick={onClick}
            tabIndex={0}
        >
            <div
                data-testid='checkbox-box'
                className={cn(`met-checkbox__${rounded ? 'circle' : 'box'}`, {
                    'met-checkbox__box--checked': !rounded && isChecked,
                    'met-checkbox__circle--checked': rounded && isChecked,
                })}
            >
                {isChecked && <img className='met-checkbox__icon' src={Check} />}
            </div>
            <div className={cn('met-checkbox__labelcontainer')}>
                <div data-testid='checkbox-label' className={cn('met-checkbox__label')}>{label}</div>
            </div>
        </div>
    );
};

Checkbox.propTypes = {
    className: PropTypes.string,
    label: PropTypes.string.isRequired,
    onCheck: PropTypes.func,
    value: PropTypes.bool,
    testId: PropTypes.string,
    disabled: PropTypes.bool,
    rounded: PropTypes.bool
};

export default Checkbox;
