import React, {useEffect} from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import './button.scss';

const Button = ({ onClick, className, children, type, disabled, rounded, testId, ...props }) => {

    useEffect(()=>{
            document.getElementById('buttonElement').addEventListener('keyup', (a) => {
                if (a.keyCode == 9) {
                    document.getElementById('buttonElement').classList.add(`met-button--${type}-keyPress`)
                }
            }, false);
            document.getElementById('buttonElement').addEventListener('keydown', (a) => {
                if (a.keyCode == 9) {
                    document.getElementById('buttonElement').classList.remove(`met-button--${type}-keyPress`)
                }
            }, false);
      
        return () => {
                document.getElementById('buttonElement').removeEventListener('keyup',null);
                document.getElementById('buttonElement').removeEventListener('keydown',null);
        }
    },[])   

    return (
        <button
            id='buttonElement'
            data-testid={testId ?? 'button-container'}
            className={cn(
                'met-button',
                `met-button--${type}`,
                {
                    'met-button--disabled': disabled,
                    'met-button--rounded': rounded
                },
                className,
            )}
            onClick={onClick}
            {...props}
        >
            {typeof children === 'string' ? (
                <span data-testid='button-text'>{children.toUpperCase()}</span>
            ) : (
                children
            )}
        </button>
    );
};

Button.propTypes = {
    className: PropTypes.string,
    children: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),
    onClick: PropTypes.func,
    type: PropTypes.string,
    disabled: PropTypes.bool,
    rounded: PropTypes.bool,
    testId: PropTypes.string,
};

Button.defaultProps = {
    type: 'primary',
    disabled: false,
};

export default Button;
