import React, { createRef, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import './dynamictext.scss';

const DynamicText = ({testId, className, defaultSize, children }) => {
    const containerRef = createRef();
    const textRef = createRef();
    const [fontSize, setFontSize] = useState(defaultSize ?? 20);
    const [shouldScale, setShouldScale] = useState(false);

    useEffect(() => {
        const { width: containerWidth } = containerRef.current.getBoundingClientRect();
        const { width: textWidth } = textRef.current.getBoundingClientRect();

        if (textWidth > containerWidth) {
            const scale = Math.floor(textWidth / containerWidth) + 1;
            setShouldScale(true);
            setFontSize((prevState) => prevState / (scale * 0.6));
        }
    }, [containerRef, textRef]);

    return (
        <div data-testid={testId ?? 'dynamicText-container'} ref={containerRef} className={cn('dynamictext', className)}>
            <span
                data-testid='dynamicTextLabel'
                ref={textRef}
                style={{ fontSize: `${fontSize}px` }}
                className={cn('dynamictext-label', {
                    'dynamictext-label--scaled': shouldScale,
                })}
            >
                {children}
            </span>
        </div>
    );
};

DynamicText.propTypes = {
    className: PropTypes.string,
    label: PropTypes.string,
    defaultSize: PropTypes.number,
};

export default DynamicText;
