import React, { useCallback, useMemo, useRef } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { Icon } from '@metlife-apac/icon';
import { Dropdown } from '@metlife-apac/dropdown';
import './table.scss';

const Table = ({
    containerClassName,
    className,
    dataList,
    columns,
    onRowClick,
    sortList,
    hasIndicator,
    onSort,
    testId,
}) => {
    const scrollRef = useRef();

    const isMultiLevel = useMemo(
        () => columns.some((column) => column.hasOwnProperty('children')),
        [columns],
    );
    const rowSpan = useMemo(() => (isMultiLevel ? '2' : '1'), [isMultiLevel]);

    const scroll = useCallback((isUp) => {
        scrollRef.current.scrollY(0, (scrollRef.current.scrollTop += isUp ? -20 : 20));
    }, []);

    return (
        <>
            {onSort && (
                <div className='met-table__sort'>
                    <Dropdown
                        testId='table-sort'
                        underline
                        className='met-table__sort-dropdown'
                        items={sortList}
                        onChange={onSort}
                        label={'Sort by'}
                    />
                </div>
            )}
            <div className='met-table__wrapper'>
                <div ref={scrollRef} className={cn('met-table__container', containerClassName)}>
                    <table data-testid={testId ?? 'table'} className={cn('met-table', className)}>
                        <thead className='met-table__header'>
                            <tr className='met-table__header-row'>
                                {columns?.map((props) => {
                                    const label = props?.label;
                                    const children = props?.children;

                                    return (
                                        <th
                                            rowSpan={children ? '1' : rowSpan}
                                            colSpan={children?.length}
                                            key={label}
                                            className='met-table__header-cell'
                                        >
                                            {label}
                                        </th>
                                    );
                                })}
                            </tr>
                            {isMultiLevel && (
                                <tr className='met-table__header-row'>
                                    {columns?.map((props, idx) => {
                                        const children = props?.children;
                                        if (children) {
                                            return (
                                                <>
                                                    {children?.map(({ label }) => (
                                                        <th
                                                            key={label}
                                                            className='met-table__header-cell'
                                                        >
                                                            {label}
                                                        </th>
                                                    ))}
                                                </>
                                            );
                                        }

                                        return null;
                                    })}
                                </tr>
                            )}
                        </thead>
                        <tbody className='met-table__body'>
                            {dataList?.map((data, idx) => (
                                <tr key={`row_${idx}`} className='met-table__body-row'>
                                    <>
                                        {columns?.map((props) => {
                                            const children = props?.children;
                                            const value = props?.value;

                                            if (children) {
                                                return (
                                                    <>
                                                        {children?.map(({ value }) => (
                                                            <td
                                                                key={value}
                                                                className='met-table__body-cell'
                                                            >
                                                                {data[value]}
                                                            </td>
                                                        ))}
                                                    </>
                                                );
                                            }

                                            return (
                                                <td key={value} className='met-table__body-cell'>
                                                    {data[value]}
                                                </td>
                                            );
                                        })}
                                        {onRowClick && (
                                            <td
                                                key='hasMore'
                                                className='met-table__body-cell met-table__body-icon'
                                                onClick={() => onRowClick(data)}
                                            >
                                                <Icon name='arrow-right' />
                                            </td>
                                        )}
                                    </>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
                {hasIndicator && (
                    <div className='met-table__indicator'>
                        <div className='met-table__indicator-icon' onClick={() => scroll(true)}>
                            <Icon name='arrow-right' className='met-table__indicator-up' />
                        </div>

                        <div className='met-table__indicator-icon' onClick={() => scroll(false)}>
                            <Icon name='arrow-right' className='met-table__indicator-down' />
                        </div>
                    </div>
                )}
            </div>
        </>
    );
};

Table.propTypes = {
    containerClassName: PropTypes.string,
    className: PropTypes.string,
    dataList: PropTypes.array.isRequired,
    columns: PropTypes.arrayOf(
        PropTypes.shape({
            label: PropTypes.string.isRequired,
            value: PropTypes.string.isRequired,
        }),
    ),
    onRowClick: PropTypes.func,
    sortList: PropTypes.arrayOf(
        PropTypes.shape({
            label: PropTypes.string.isRequired,
            value: PropTypes.string.isRequired,
        }),
    ),
    onSort: PropTypes.func,
    testId: PropTypes.string,
    hasIndicator: PropTypes.bool,
};

export default Table;
