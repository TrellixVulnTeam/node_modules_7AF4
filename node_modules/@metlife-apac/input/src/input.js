import React, { useCallback, useState, forwardRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import ShowIcon from '../../assets/images/show.png';
import HideIcon from '../../assets/images/hide.png';
import InfoIcon from '../../assets/images/info.png';
import './input.scss';

const Input = forwardRef(
    (
        {
            className,
            inputclassName,
            label,
            placeholder,
            error,
            value,
            testId,
            type,
            inputStyle,
            onChange,
            OnFocus,
            onBlur,
            pattern,
            toolTipTitle,
            toolTipContent,
            iconType,
            infoContent,
            disabled,
            ...props
        },
        ref,
    ) => {
        const [isFocus, setIsFocus] = useState(false);
        const [inputValue, setInputValue] = useState(value);
        const [showText, setShowText] = useState(true);
        const [showInfoText, setShowInfoText] = useState(false);
        const [showToolTipContent, setShowToolTipContent] = useState(false);

        const onFocusToggle = useCallback((flag) => {
            setIsFocus(flag);
            if (flag == true && onFocus) {
                onFocus();
            }
            if (flag == false && onBlur) {
                onBlur();
            }
        }, []);

        const onTextChange = useCallback((event) => {
            setInputValue(event.target.value);
            if (onChange) {
                onChange(event);
            }
        }, []);

        useEffect(() => {
            setInputValue(value);
        }, [value]);

        return (
            <div data-testid={testId ?? 'input-wrapper'} className={cn('met-input', className)}>
                <div
                    data-testid='input-container'
                    className={cn(
                        'met-input__container',
                        `met-input--${inputStyle}`,
                        {
                            'met-input--error': error,
                            'met-input--focusBorder': isFocus && inputStyle == 'outlined',
                            'met-input--disabled--outlined': disabled && inputStyle == 'outlined',
                            'met-input--disabled--underlined': disabled && inputStyle == 'underlined',
                        },
                        inputclassName,
                    )}
                >
                    <div
                        data-testid='input-label'
                        className={cn('met-input__label', {
                            'met-input__label--focused': isFocus || inputValue,
                            'met-input__label--error': error,
                        })}
                    >
                        {label}
                    </div>
                    <input
                        ref={ref}
                        data-testid='input-field'
                        className={cn('met-input__field', {
                            'met-input__field--focused': isFocus,
                        })}
                        value={inputValue}
                        placeholder={isFocus ? placeholder : ''}
                        onFocus={() => onFocusToggle(true)}
                        onBlur={() => onFocusToggle(false)}
                        onChange={onTextChange}
                        pattern={pattern}
                        type={iconType === 'showhide' ? (showText ? 'text' : 'password') : type}
                        disabled={disabled}
                        {...props}
                    />
                    {iconType == 'showhide' ? (
                        <img
                            onClick={() => setShowText((prevState) => !prevState)}
                            className={'met-showHideIcon'}
                            src={
                                showText
                                    ? ShowIcon
                                    : HideIcon
                            }
                        />
                    ) : null}
                    {iconType == 'info' ? (
                        <img
                            onClick={() => setShowInfoText((prevState) => !prevState)}
                            className={'met-showHideIcon'}
                            src={InfoIcon}
                        />
                    ) : null}
                </div>
                {showInfoText && (
                    <div className='met-input--tooltipContainer'>
                        <div className='met-input--tooltip'></div>
                        <div data-testid='tooltipTitle' className='met-input--infoContent'>
                            {infoContent}
                        </div>
                    </div>
                )}
                {error && (
                    <div data-testid='input-error' className='met-input--error'>
                        {error}
                    </div>
                )}
                {toolTipTitle && (
                    <div
                        data-testid='tooltipTitle'
                        className='met-input--toolTipTitle'
                        onClick={() => setShowToolTipContent((prevState) => !prevState)}
                    >
                        {toolTipTitle}
                    </div>
                )}
                {showToolTipContent && (
                    <div data-testid='tooltipTitle' className='met-input--toolTipContent'>
                        {toolTipContent}
                    </div>
                )}
            </div>
        );
    },
);

Input.propTypes = {
    label: PropTypes.string.isRequired,
    className: PropTypes.string,
    placeholder: PropTypes.string,
    value: PropTypes.string,
    error: PropTypes.string,
    testId: PropTypes.string,
    pattern: PropTypes.string,
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    onChange: PropTypes.func,
    type: PropTypes.string,
    toolTipTitle: PropTypes.string,
    toolTipContent: PropTypes.string,
    infoContent: PropTypes.string,
    iconType: PropTypes.string,
    inputStyle: PropTypes.string,
    disabled: PropTypes.bool,
};

Input.defaultProps = {
    inputStyle: 'outline',
    disabled: false,
};

export default Input;
