import React, { useCallback, useMemo, useState } from "react";
import PropTypes from "prop-types";
import cn from "classnames";
import Plus from '../../assets/images/plus.png';
import Minus from '../../assets/images/minus.png';
import "./list.scss";

const List = ({
  testId,
  className,
  data,
  renderItem,
  collapsedSize,
  keyExtractor,
  hideDivider,
  emptyMsg,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const shouldCollapsed = useMemo(
    () => (collapsedSize ? data.length > collapsedSize : false),
    [data, collapsedSize]
  );
  const collapsedItem = useMemo(
    () =>
      collapsedSize
        ? data.filter((item, idx) => idx + 1 <= collapsedSize)
        : data,
    [data, collapsedSize]
  );

  const expandedItem = useMemo(
    () =>
      collapsedSize
        ? data.filter((item, idx) => idx + 1 > collapsedSize)
        : data,
    [data, collapsedSize]
  );
  
  const onCollapsed = useCallback(() => {
    setIsCollapsed((prevState) => !prevState);
  }, [setIsCollapsed]);

  if (!data.length) {
    return <>{emptyMsg ? emptyMsg : <div className="met-list__empty"></div>}</>;
  }

  return (
    <div data-testid={testId ?? "list"} className={cn("met-list", className)}>
      {collapsedItem.map((item, idx) => {
        const isLast = idx + 1 === collapsedItem.length && isCollapsed;
        return (
          <div
            className={cn("met-list__item", {
              "met-list__item--divide": hideDivider,
              "met-list__item--last": isLast,
            })}
            key={keyExtractor ? keyExtractor(item, idx) : idx}
          >
            {renderItem(item, idx)}
          </div>
        );
      })}
      <div
        data-testid={testId ? `${testId}-expand` : "list-expand"}
        className={cn("met-list__expand", {
          "met-list__expand--expanded": !isCollapsed,
          "met-list__expand--collapsed": isCollapsed,
        })}
      >
        {expandedItem.map((item, idx) => {
          const isLast =
            collapsedSize + idx + 1 === data.length && !isCollapsed;
          return (
            <div
              className={cn("met-list__item", {
                "met-list__item--divide": hideDivider,
                "met-list__item--last": isLast,
              })}
              key={keyExtractor ? keyExtractor(item, idx) : idx}
            >
              {renderItem(item, idx)}
            </div>
          );
        })}
      </div>
      {shouldCollapsed && (
        <div
          data-testid={testId ? `${testId}-more` : "list-more"}
          className="met-list__more"
          onClick={onCollapsed}
        >
          <div className="met-list__more-text">
            {isCollapsed ? "View More" : "View Less"}
          </div>
          <img className="met-list__more-icon"
             src={isCollapsed ? Plus : Minus}
          />
        </div>
      )}
    </div>
  );
};

List.propTypes = {
  testId: PropTypes.string,
  className: PropTypes.string,
  data: PropTypes.array.isRequired,
  renderItem: PropTypes.func.isRequired,
  collapsedSize: PropTypes.number,
  keyExtractor: PropTypes.func,
  hideDivider: PropTypes.bool,
  emptyMsg: PropTypes.node,
};

export default List;
